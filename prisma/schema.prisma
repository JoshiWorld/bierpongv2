generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Turnier {
    id        String        @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    code      String        @unique
    status    TurnierStatus @default(LOBBY)
    size      TurnierSize   @default(EXTREME)
    adminId   String        @db.ObjectId
    admin     User          @relation(fields: [adminId], references: [id])
    teams     Team[]
    gruppen   Gruppe[]
    finals    Final[]
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
}

enum TurnierStatus {
    LOBBY
    GRUPPENPHASE
    KO_PHASE
    ABGESCHLOSSEN
}

enum TurnierSize {
    SMALL // 4 Teams
    MEDIUM // 8 Teams
    BIG // 16 Teams
    EXTREME // 32 Teams
}

model Team {
    id              String          @id @default(auto()) @map("_id") @db.ObjectId
    name            String
    spieler1Id      String          @db.ObjectId
    spieler1        User            @relation(name: "Spieler1", fields: [spieler1Id], references: [id])
    spieler2Id      String          @db.ObjectId
    spieler2        User            @relation(name: "Spieler2", fields: [spieler2Id], references: [id])
    turnierId       String          @db.ObjectId
    turnier         Turnier         @relation(fields: [turnierId], references: [id])
    gruppeId        String?         @db.ObjectId
    gruppe          Gruppe?         @relation(fields: [gruppeId], references: [id])
    punkte          Int             @default(0)
    cups            Int             @default(0) // Verteidigte Becher
    enemyCups       Int             @default(0) // Gefallene Becher
    spiele1         Spiel[]         @relation(name: "Team1")
    spiele2         Spiel[]         @relation(name: "Team2")
    ergebnisse      Spielergebnis[] @relation(name: "Winner")
    ergebnisCreator Spielergebnis[] @relation(name: "Creator")
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String    @unique
    role          UserRole  @default(MEMBER)
    accounts      Account[]
    sessions      Session[]
    teamsSpieler1 Team[]    @relation("Spieler1")
    teamsSpieler2 Team[]    @relation("Spieler2")
    turniere      Turnier[]
}

enum UserRole {
    MEMBER
    ADMIN
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Gruppe {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    turnierId String   @db.ObjectId
    turnier   Turnier  @relation(fields: [turnierId], references: [id])
    teams     Team[]
    spiele    Spiel[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Final {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    turnierId String   @db.ObjectId
    turnier   Turnier  @relation(fields: [turnierId], references: [id])
    spiele    Spiel[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Spiel {
    id         String          @id @default(auto()) @map("_id") @db.ObjectId
    gruppeId   String?         @db.ObjectId
    gruppe     Gruppe?         @relation(fields: [gruppeId], references: [id], onDelete: Cascade)
    finalId    String?         @db.ObjectId
    final      Final?          @relation(fields: [finalId], references: [id])
    team1Id    String          @db.ObjectId
    team1      Team            @relation(name: "Team1", fields: [team1Id], references: [id])
    team2Id    String          @db.ObjectId
    team2      Team            @relation(name: "Team2", fields: [team2Id], references: [id])
    cupsTeam1  Int?
    cupsTeam2  Int?
    ergebnisse Spielergebnis[]
    done       Boolean         @default(false)
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @updatedAt
}

model Spielergebnis {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    spielId   String @db.ObjectId
    spiel     Spiel  @relation(fields: [spielId], references: [id], onDelete: Cascade)
    team1Cups Int
    team2Cups Int
    winnerId  String @db.ObjectId
    winner    Team   @relation(name: "Winner", fields: [winnerId], references: [id], onDelete: Cascade)
    creatorId String @db.ObjectId
    creator   Team   @relation(name: "Creator", fields: [creatorId], references: [id], onDelete: Cascade)

    @@index([spielId])
}
