generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Turnier {
    id        String        @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    status    TurnierStatus @default(LOBBY)
    adminId   String        @db.ObjectId
    admin     User          @relation(fields: [adminId], references: [id])
    teams     Team[]
    gruppen   Gruppe[]
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
}

enum TurnierStatus {
    LOBBY
    GRUPPENPHASE
    KO_PHASE
    ABGESCHLOSSEN
}

model Team {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    spieler1Id String   @db.ObjectId
    spieler1   User     @relation(name: "Spieler1", fields: [spieler1Id], references: [id])
    spieler2Id String   @db.ObjectId
    spieler2   User     @relation(name: "Spieler2", fields: [spieler2Id], references: [id])
    turnierId  String   @db.ObjectId
    turnier    Turnier  @relation(fields: [turnierId], references: [id])
    gruppeId   String?  @db.ObjectId
    gruppe     Gruppe?  @relation(fields: [gruppeId], references: [id])
    punkte     Int      @default(0)
    spiele1    Spiel[]  @relation(name: "Team1")
    spiele2    Spiel[]  @relation(name: "Team2")
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    teamsSpieler1 Team[]    @relation("Spieler1")
    teamsSpieler2 Team[]    @relation("Spieler2")
    turniere      Turnier[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Gruppe {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    turnierId String   @db.ObjectId
    turnier   Turnier  @relation(fields: [turnierId], references: [id])
    teams     Team[]
    spiele    Spiel[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Spiel {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    gruppeId    String   @db.ObjectId
    gruppe      Gruppe   @relation(fields: [gruppeId], references: [id])
    team1Id     String   @db.ObjectId
    team1       Team     @relation(name: "Team1", fields: [team1Id], references: [id])
    team2Id     String   @db.ObjectId
    team2       Team     @relation(name: "Team2", fields: [team2Id], references: [id])
    punkteTeam1 Int?
    punkteTeam2 Int?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
